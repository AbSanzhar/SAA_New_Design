import * as tslib_1 from "tslib";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var CountryPickerService_1;
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { COUNTRY_PICKER_CONFIG } from './country-picker.config';
let CountryPickerService = CountryPickerService_1 = class CountryPickerService {
    constructor(config, _http) {
        this._http = _http;
        this._data = null;
        this._baseUrl = config.baseUrl;
        this._filename = config.filename;
        this._data = this._loadData();
    }
    static handleError(error) {
        let errMsg;
        if (error instanceof HttpResponse) {
            if (error.status === 404) {
                errMsg = 'Error loading countries.json file.'
                    + ' Please configure WebPack and load countries.json assets to your root folder';
            }
            else {
                const body = error.body || '';
                const err = body.error || JSON.stringify(body);
                errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
            }
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return throwError(errMsg);
    }
    getCountries() {
        return this._data
            .pipe(map((countries) => countries.map((country) => {
            country.name.native[0] = country.name.native[Object.keys(country.name.native)[0]];
            return country;
        })));
    }
    getBaseUrl() {
        return this._baseUrl;
    }
    _loadData() {
        return this._http.get(this._baseUrl + this._filename)
            .pipe(catchError(CountryPickerService_1.handleError));
    }
};
CountryPickerService.ɵfac = function CountryPickerService_Factory(t) { return new (t || CountryPickerService)(ɵngcc0.ɵɵinject(COUNTRY_PICKER_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
CountryPickerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CountryPickerService, factory: function (t) { return CountryPickerService.ɵfac(t); } });
CountryPickerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COUNTRY_PICKER_CONFIG,] }] },
    { type: HttpClient }
];
CountryPickerService = CountryPickerService_1 = tslib_1.__decorate([ tslib_1.__param(0, Inject(COUNTRY_PICKER_CONFIG))
], CountryPickerService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountryPickerService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [COUNTRY_PICKER_CONFIG]
            }] }, { type: ɵngcc1.HttpClient }]; }, null); })();
export { CountryPickerService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1jb3VudHJ5LXBpY2tlci9jb3VudHJ5LXBpY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hFLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUscUJBQXFCLEVBQXVCLE1BQU0seUJBQXlCLENBQUM7QUFJckYsSUFBYSxvQkFBb0IsNEJBQWpDO0lBd0JFLFlBQ2lDLE1BQTJCLEVBQ2xELEtBQWlCO1FBQWpCLFVBQUssR0FBTCxLQUFLLENBQVk7UUF0Qm5CLFVBQUssR0FBa0MsSUFBSSxDQUFDO1FBd0JsRCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUF6QlMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUE4QjtRQUN6RCxJQUFJLE1BQWMsQ0FBQztRQUNuQixJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7WUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtnQkFDeEIsTUFBTSxHQUFHLG9DQUFvQztzQkFDekMsOEVBQThFLENBQUM7YUFDcEY7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0MsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTSxLQUFLLENBQUMsVUFBVSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUMvRDtTQUNGO2FBQU07WUFDTCxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzNEO1FBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBV00sWUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLFNBQXFCLEVBQUUsRUFBRSxDQUM1QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBaUIsRUFBRSxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQUNOLENBQUM7SUFFTSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxTQUFTO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBYSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDOUQsSUFBSSxDQUNILFVBQVUsQ0FBQyxzQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FDN0MsQ0FBQztJQUNOLENBQUM7Q0FDRjs7d0pBQUE7OzRDQTlCSSxNQUFNLFNBQUMscUJBQXFCO1lBQ2QsVUFBVTs7QUExQmhCLG9CQUFvQixnREFHMUIsS0FKTixVQUFVLEVBQUUsakJBQ1QsQ0F5QkMsbUJBQUEsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUE7R0F6QnJCLG9CQUFvQixDQXVEaEM7Ozs7OzsrREFDRDtTQXhEYSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQ09VTlRSWV9QSUNLRVJfQ09ORklHLCBDb3VudHJ5UGlja2VyQ29uZmlnIH0gZnJvbSAnLi9jb3VudHJ5LXBpY2tlci5jb25maWcnO1xuaW1wb3J0IHsgSUNvdW50cnkgfSBmcm9tICcuL2NvdW50cnkuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvdW50cnlQaWNrZXJTZXJ2aWNlIHtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9iYXNlVXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2ZpbGVuYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgX2RhdGE6IE9ic2VydmFibGU8SUNvdW50cnlbXT4gfCBudWxsID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgc3RhdGljIGhhbmRsZUVycm9yKGVycm9yOiBIdHRwUmVzcG9uc2U8YW55PiB8IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgbGV0IGVyck1zZzogc3RyaW5nO1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIGVyck1zZyA9ICdFcnJvciBsb2FkaW5nIGNvdW50cmllcy5qc29uIGZpbGUuJ1xuICAgICAgICAgICsgJyBQbGVhc2UgY29uZmlndXJlIFdlYlBhY2sgYW5kIGxvYWQgY291bnRyaWVzLmpzb24gYXNzZXRzIHRvIHlvdXIgcm9vdCBmb2xkZXInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYm9keSA9IGVycm9yLmJvZHkgfHwgJyc7XG4gICAgICAgIGNvbnN0IGVyciA9IGJvZHkuZXJyb3IgfHwgSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgICAgIGVyck1zZyA9IGAke2Vycm9yLnN0YXR1c30gLSAke2Vycm9yLnN0YXR1c1RleHQgfHwgJyd9ICR7ZXJyfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyck1zZyA9IGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcihlcnJNc2cpO1xuICAgIHJldHVybiB0aHJvd0Vycm9yKGVyck1zZyk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KENPVU5UUllfUElDS0VSX0NPTkZJRykgY29uZmlnOiBDb3VudHJ5UGlja2VyQ29uZmlnLFxuICAgIHByaXZhdGUgX2h0dHA6IEh0dHBDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5fYmFzZVVybCA9IGNvbmZpZy5iYXNlVXJsO1xuICAgIHRoaXMuX2ZpbGVuYW1lID0gY29uZmlnLmZpbGVuYW1lO1xuICAgIHRoaXMuX2RhdGEgPSB0aGlzLl9sb2FkRGF0YSgpO1xuICB9XG5cbiAgcHVibGljIGdldENvdW50cmllcygpOiBPYnNlcnZhYmxlPElDb3VudHJ5W10+IHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgoY291bnRyaWVzOiBJQ291bnRyeVtdKSA9PlxuICAgICAgICAgIGNvdW50cmllcy5tYXAoKGNvdW50cnk6IElDb3VudHJ5KSA9PiB7XG4gICAgICAgICAgICBjb3VudHJ5Lm5hbWUubmF0aXZlWzBdID0gY291bnRyeS5uYW1lLm5hdGl2ZVtPYmplY3Qua2V5cyhjb3VudHJ5Lm5hbWUubmF0aXZlKVswXV07XG4gICAgICAgICAgICByZXR1cm4gY291bnRyeTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIGdldEJhc2VVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYmFzZVVybDtcbiAgfVxuXG4gIHByaXZhdGUgX2xvYWREYXRhKCk6IE9ic2VydmFibGU8SUNvdW50cnlbXT4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldDxJQ291bnRyeVtdPih0aGlzLl9iYXNlVXJsICsgdGhpcy5fZmlsZW5hbWUpXG4gICAgICAucGlwZShcbiAgICAgICAgY2F0Y2hFcnJvcihDb3VudHJ5UGlja2VyU2VydmljZS5oYW5kbGVFcnJvcilcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==