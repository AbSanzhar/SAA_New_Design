import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';
import { CountryPickerService } from './country-picker.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function CountryPickerComponent_option_1_img_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 3);
} if (rf & 2) {
    const c_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("src", ctx_r2.baseUrl + c_r1.cca3.toLowerCase() + ".svg", ɵngcc0.ɵɵsanitizeUrl);
} }
function CountryPickerComponent_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 1);
    ɵngcc0.ɵɵtemplate(1, CountryPickerComponent_option_1_img_1_Template, 1, 1, "img", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const c_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r0.getValue(c_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.flag);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0.getName(c_r1), " ");
} }
let CountryPickerComponent = class CountryPickerComponent {
    constructor(_countryPickerService, _cdr) {
        this._countryPickerService = _countryPickerService;
        this._cdr = _cdr;
        this.flag = false;
        this.setValue = 'cca3';
        this.setName = 'name.common';
        this.classes = ['form-control', 'form-control-sm'];
        this.countries = [];
        this.baseUrl = _countryPickerService.getBaseUrl() + 'data/';
    }
    ngOnInit() {
        this._countryPickerService.getCountries()
            .subscribe(countries => {
            this.countries = countries.sort((a, b) => {
                let na = this.getName(a);
                let nb = this.getName(b);
                if (na > nb) {
                    return 1;
                }
                if (na < nb) {
                    return -1;
                }
                return 0;
            });
            this._cdr.markForCheck();
        });
    }
    getValue(obj) {
        return this.setValue.split('.').reduce((o, i) => o[i], obj);
    }
    getName(obj) {
        return this.setName.split('.').reduce((o, i) => o[i], obj);
    }
};
CountryPickerComponent.ɵfac = function CountryPickerComponent_Factory(t) { return new (t || CountryPickerComponent)(ɵngcc0.ɵɵdirectiveInject(CountryPickerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
CountryPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountryPickerComponent, selectors: [["country-picker"]], inputs: { flag: "flag", setValue: "setValue", setName: "setName", classes: "classes" }, decls: 2, vars: 3, consts: [[3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [3, "src", 4, "ngIf"], [3, "src"]], template: function CountryPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "select");
        ɵngcc0.ɵɵtemplate(1, CountryPickerComponent_option_1_Template, 3, 3, "option", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.classes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.countries);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
CountryPickerComponent.ctorParameters = () => [
    { type: CountryPickerService },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input()
], CountryPickerComponent.prototype, "flag", void 0);
tslib_1.__decorate([
    Input()
], CountryPickerComponent.prototype, "setValue", void 0);
tslib_1.__decorate([
    Input()
], CountryPickerComponent.prototype, "setName", void 0);
tslib_1.__decorate([
    Input()
], CountryPickerComponent.prototype, "classes", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountryPickerComponent, [{
        type: Component,
        args: [{
                selector: 'country-picker',
                template: `
      <select [class]="classes">
          <option *ngFor="let c of countries" [value]="getValue(c)">
              <img *ngIf="flag" [src]="baseUrl + c.cca3.toLowerCase() + '.svg'">{{ getName(c) }}
          </option>
      </select>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: CountryPickerService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { flag: [{
            type: Input
        }], setValue: [{
            type: Input
        }], setName: [{
            type: Input
        }], classes: [{
            type: Input
        }] }); })();
export { CountryPickerComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovbmd4LWNvdW50cnktcGlja2VyL2NvdW50cnktcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3JHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBYWhFLElBQWEsc0JBQXNCLEdBQW5DO0lBVUUsWUFDVSxxQkFBMkMsRUFDM0MsSUFBdUI7UUFEdkIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFzQjtRQUMzQyxTQUFJLEdBQUosSUFBSSxDQUFtQjtRQVZqQixTQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2IsYUFBUSxHQUFHLE1BQU0sQ0FBQztRQUNsQixZQUFPLEdBQUcsYUFBYSxDQUFDO1FBQ3hCLFlBQU8sR0FBRyxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRXZELGNBQVMsR0FBZSxFQUFFLENBQUM7UUFPaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDOUQsQ0FBQztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMscUJBQXFCLENBQUMsWUFBWSxFQUFFO2FBQ3RDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLEVBQUUsQ0FBVyxFQUFFLEVBQUU7Z0JBQzNELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFDWCxPQUFPLENBQUMsQ0FBQztpQkFDVjtnQkFDRCxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFDWDtnQkFDRCxPQUFPLENBQUMsQ0FBQztZQUNYLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxRQUFRLENBQUMsR0FBYTtRQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sT0FBTyxDQUFDLEdBQWE7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNGOzs7Ozs7Ozs7OzRGQUFBOztZQS9Ca0Msb0JBQW9CO1lBQ3JDLGlCQUFpQjs7QUFWeEI7SUFBUixLQUFLLEVBQUU7b0RBQXFCO0FBQ3BCO0lBQVIsS0FBSyxFQUFFO3dEQUEwQjtBQUN6QjtJQUFSLEtBQUssRUFBRTt1REFBZ0M7QUFDL0I7SUFBUixLQUFLLEVBQUU7dURBQXNELENBQ2hFO0FBTmEsc0JBQXNCLDRCQVhsQyxTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUU7ZUFBZ0I7QUFDMUIsUUFBUSxFQUFFOzs7OzsyREFNVCxVQUNELGVBQWUsRUFBRTtZQUF1QixDQUFDLE1BQU07S0FDaEQsQ0FBQyxJQUNXOztXQUFzQixDQTBDbEM7Ozs7Ozs7Ozs7b0JBQ0Q7U0EzQ2Esc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSUNvdW50cnkgfSBmcm9tICcuL2NvdW50cnkuaW50ZXJmYWNlJztcbmltcG9ydCB7IENvdW50cnlQaWNrZXJTZXJ2aWNlIH0gZnJvbSAnLi9jb3VudHJ5LXBpY2tlci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY291bnRyeS1waWNrZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgICAgPHNlbGVjdCBbY2xhc3NdPVwiY2xhc3Nlc1wiPlxuICAgICAgICAgIDxvcHRpb24gKm5nRm9yPVwibGV0IGMgb2YgY291bnRyaWVzXCIgW3ZhbHVlXT1cImdldFZhbHVlKGMpXCI+XG4gICAgICAgICAgICAgIDxpbWcgKm5nSWY9XCJmbGFnXCIgW3NyY109XCJiYXNlVXJsICsgYy5jY2EzLnRvTG93ZXJDYXNlKCkgKyAnLnN2ZydcIj57eyBnZXROYW1lKGMpIH19XG4gICAgICAgICAgPC9vcHRpb24+XG4gICAgICA8L3NlbGVjdD5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENvdW50cnlQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBmbGFnID0gZmFsc2U7XG4gIEBJbnB1dCgpIHB1YmxpYyBzZXRWYWx1ZSA9ICdjY2EzJztcbiAgQElucHV0KCkgcHVibGljIHNldE5hbWUgPSAnbmFtZS5jb21tb24nO1xuICBASW5wdXQoKSBwdWJsaWMgY2xhc3NlcyA9IFsnZm9ybS1jb250cm9sJywgJ2Zvcm0tY29udHJvbC1zbSddO1xuXG4gIHB1YmxpYyBjb3VudHJpZXM6IElDb3VudHJ5W10gPSBbXTtcbiAgcHVibGljIGJhc2VVcmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9jb3VudHJ5UGlja2VyU2VydmljZTogQ291bnRyeVBpY2tlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBfY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gX2NvdW50cnlQaWNrZXJTZXJ2aWNlLmdldEJhc2VVcmwoKSArICdkYXRhLyc7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5fY291bnRyeVBpY2tlclNlcnZpY2UuZ2V0Q291bnRyaWVzKClcbiAgICAgIC5zdWJzY3JpYmUoY291bnRyaWVzID0+IHtcbiAgICAgICAgdGhpcy5jb3VudHJpZXMgPSBjb3VudHJpZXMuc29ydCgoYTogSUNvdW50cnksIGI6IElDb3VudHJ5KSA9PiB7XG4gICAgICAgICAgbGV0IG5hID0gdGhpcy5nZXROYW1lKGEpO1xuICAgICAgICAgIGxldCBuYiA9IHRoaXMuZ2V0TmFtZShiKTtcbiAgICAgICAgICBpZiAobmEgPiBuYikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuYSA8IG5iKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VmFsdWUob2JqOiBJQ291bnRyeSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2V0VmFsdWUuc3BsaXQoJy4nKS5yZWR1Y2UoKG8sIGkpID0+IG9baV0sIG9iaik7XG4gIH1cblxuICBwdWJsaWMgZ2V0TmFtZShvYmo6IElDb3VudHJ5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zZXROYW1lLnNwbGl0KCcuJykucmVkdWNlKChvLCBpKSA9PiBvW2ldLCBvYmopO1xuICB9XG59XG4iXX0=