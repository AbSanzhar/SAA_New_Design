import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';
import { CountryPickerService } from './country-picker.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function CountryPickerComponent_option_1_img_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 3);
} if (rf & 2) {
    var c_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("src", ctx_r2.baseUrl + c_r1.cca3.toLowerCase() + ".svg", ɵngcc0.ɵɵsanitizeUrl);
} }
function CountryPickerComponent_option_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 1);
    ɵngcc0.ɵɵtemplate(1, CountryPickerComponent_option_1_img_1_Template, 1, 1, "img", 2);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var c_r1 = ctx.$implicit;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", ctx_r0.getValue(c_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.flag);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("", ctx_r0.getName(c_r1), " ");
} }
var CountryPickerComponent = /** @class */ (function () {
    function CountryPickerComponent(_countryPickerService, _cdr) {
        this._countryPickerService = _countryPickerService;
        this._cdr = _cdr;
        this.flag = false;
        this.setValue = 'cca3';
        this.setName = 'name.common';
        this.classes = ['form-control', 'form-control-sm'];
        this.countries = [];
        this.baseUrl = _countryPickerService.getBaseUrl() + 'data/';
    }
    CountryPickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._countryPickerService.getCountries()
            .subscribe(function (countries) {
            _this.countries = countries.sort(function (a, b) {
                var na = _this.getName(a);
                var nb = _this.getName(b);
                if (na > nb) {
                    return 1;
                }
                if (na < nb) {
                    return -1;
                }
                return 0;
            });
            _this._cdr.markForCheck();
        });
    };
    CountryPickerComponent.prototype.getValue = function (obj) {
        return this.setValue.split('.').reduce(function (o, i) { return o[i]; }, obj);
    };
    CountryPickerComponent.prototype.getName = function (obj) {
        return this.setName.split('.').reduce(function (o, i) { return o[i]; }, obj);
    };
    CountryPickerComponent.ctorParameters = function () { return [
        { type: CountryPickerService },
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        Input()
    ], CountryPickerComponent.prototype, "flag", void 0);
    tslib_1.__decorate([
        Input()
    ], CountryPickerComponent.prototype, "setValue", void 0);
    tslib_1.__decorate([
        Input()
    ], CountryPickerComponent.prototype, "setName", void 0);
    tslib_1.__decorate([
        Input()
    ], CountryPickerComponent.prototype, "classes", void 0);
CountryPickerComponent.ɵfac = function CountryPickerComponent_Factory(t) { return new (t || CountryPickerComponent)(ɵngcc0.ɵɵdirectiveInject(CountryPickerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
CountryPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountryPickerComponent, selectors: [["country-picker"]], inputs: { flag: "flag", setValue: "setValue", setName: "setName", classes: "classes" }, decls: 2, vars: 3, consts: [[3, "value", 4, "ngFor", "ngForOf"], [3, "value"], [3, "src", 4, "ngIf"], [3, "src"]], template: function CountryPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "select");
        ɵngcc0.ɵɵtemplate(1, CountryPickerComponent_option_1_Template, 3, 3, "option", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.classes);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.countries);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountryPickerComponent, [{
        type: Component,
        args: [{
                selector: 'country-picker',
                template: "\n      <select [class]=\"classes\">\n          <option *ngFor=\"let c of countries\" [value]=\"getValue(c)\">\n              <img *ngIf=\"flag\" [src]=\"baseUrl + c.cca3.toLowerCase() + '.svg'\">{{ getName(c) }}\n          </option>\n      </select>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: CountryPickerService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { flag: [{
            type: Input
        }], setValue: [{
            type: Input
        }], setName: [{
            type: Input
        }], classes: [{
            type: Input
        }] }); })();
    return CountryPickerComponent;
}());
export { CountryPickerComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovbmd4LWNvdW50cnktcGlja2VyL2NvdW50cnktcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3JHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBYWhFO0lBVUUsZ0NBQ1UscUJBQTJDLEVBQzNDLElBQXVCO1FBRHZCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBc0I7UUFDM0MsU0FBSSxHQUFKLElBQUksQ0FBbUI7UUFWakIsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUNiLGFBQVEsR0FBRyxNQUFNLENBQUM7UUFDbEIsWUFBTyxHQUFHLGFBQWEsQ0FBQztRQUN4QixZQUFPLEdBQUcsQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUV2RCxjQUFTLEdBQWUsRUFBRSxDQUFDO1FBT2hDLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsVUFBVSxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQzlELENBQUM7SUFFTSx5Q0FBUSxHQUFmO1FBQUEsaUJBZ0JDO1FBZkMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRTthQUN0QyxTQUFTLENBQUMsVUFBQSxTQUFTO1lBQ2xCLEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQVcsRUFBRSxDQUFXO2dCQUN2RCxJQUFJLEVBQUUsR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLEVBQUUsR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7b0JBQ1gsT0FBTyxDQUFDLENBQUM7aUJBQ1Y7Z0JBQ0QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO29CQUNYLE9BQU8sQ0FBQyxDQUFDLENBQUM7aUJBQ1g7Z0JBQ0QsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztZQUNILEtBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0seUNBQVEsR0FBZixVQUFnQixHQUFhO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBSixDQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLHdDQUFPLEdBQWQsVUFBZSxHQUFhO1FBQzFCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBSixDQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Z0JBOUJnQyxvQkFBb0I7Z0JBQ3JDLGlCQUFpQjs7SUFWeEI7UUFBUixLQUFLLEVBQUU7d0RBQXFCO0lBQ3BCO1FBQVIsS0FBSyxFQUFFOzREQUEwQjtJQUN6QjtRQUFSLEtBQUssRUFBRTsyREFBZ0M7SUFDL0I7UUFBUixLQUFLLEVBQUU7MkRBQXNELENBQ2hFO0lBTmEsc0JBQXNCLGdDQVhsQyxTQUFTLENBQUMsY0FDVCxRQUFRLEVBQUUsZ0JBQWdCLGNBQzFCLFFBQVEsRUFBRTt3S0FNVCxjQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLFVBQ2hELENBQUMsUUFDVyxzQkFBc0IsQ0EwQ2xDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7SUFEQSw2QkFBQztDQUFBLEFBMUNELElBMENDO1NBMUNZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElDb3VudHJ5IH0gZnJvbSAnLi9jb3VudHJ5LmludGVyZmFjZSc7XG5pbXBvcnQgeyBDb3VudHJ5UGlja2VyU2VydmljZSB9IGZyb20gJy4vY291bnRyeS1waWNrZXIuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NvdW50cnktcGlja2VyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICAgIDxzZWxlY3QgW2NsYXNzXT1cImNsYXNzZXNcIj5cbiAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cImxldCBjIG9mIGNvdW50cmllc1wiIFt2YWx1ZV09XCJnZXRWYWx1ZShjKVwiPlxuICAgICAgICAgICAgICA8aW1nICpuZ0lmPVwiZmxhZ1wiIFtzcmNdPVwiYmFzZVVybCArIGMuY2NhMy50b0xvd2VyQ2FzZSgpICsgJy5zdmcnXCI+e3sgZ2V0TmFtZShjKSB9fVxuICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgPC9zZWxlY3Q+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBDb3VudHJ5UGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBwdWJsaWMgZmxhZyA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgc2V0VmFsdWUgPSAnY2NhMyc7XG4gIEBJbnB1dCgpIHB1YmxpYyBzZXROYW1lID0gJ25hbWUuY29tbW9uJztcbiAgQElucHV0KCkgcHVibGljIGNsYXNzZXMgPSBbJ2Zvcm0tY29udHJvbCcsICdmb3JtLWNvbnRyb2wtc20nXTtcblxuICBwdWJsaWMgY291bnRyaWVzOiBJQ291bnRyeVtdID0gW107XG4gIHB1YmxpYyBiYXNlVXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfY291bnRyeVBpY2tlclNlcnZpY2U6IENvdW50cnlQaWNrZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgX2NkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICkge1xuICAgIHRoaXMuYmFzZVVybCA9IF9jb3VudHJ5UGlja2VyU2VydmljZS5nZXRCYXNlVXJsKCkgKyAnZGF0YS8nO1xuICB9XG5cbiAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX2NvdW50cnlQaWNrZXJTZXJ2aWNlLmdldENvdW50cmllcygpXG4gICAgICAuc3Vic2NyaWJlKGNvdW50cmllcyA9PiB7XG4gICAgICAgIHRoaXMuY291bnRyaWVzID0gY291bnRyaWVzLnNvcnQoKGE6IElDb3VudHJ5LCBiOiBJQ291bnRyeSkgPT4ge1xuICAgICAgICAgIGxldCBuYSA9IHRoaXMuZ2V0TmFtZShhKTtcbiAgICAgICAgICBsZXQgbmIgPSB0aGlzLmdldE5hbWUoYik7XG4gICAgICAgICAgaWYgKG5hID4gbmIpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobmEgPCBuYikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2Nkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFZhbHVlKG9iajogSUNvdW50cnkpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlLnNwbGl0KCcuJykucmVkdWNlKChvLCBpKSA9PiBvW2ldLCBvYmopO1xuICB9XG5cbiAgcHVibGljIGdldE5hbWUob2JqOiBJQ291bnRyeSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2V0TmFtZS5zcGxpdCgnLicpLnJlZHVjZSgobywgaSkgPT4gb1tpXSwgb2JqKTtcbiAgfVxufVxuIl19