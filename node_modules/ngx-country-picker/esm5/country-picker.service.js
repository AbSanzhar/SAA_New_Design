import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { COUNTRY_PICKER_CONFIG } from './country-picker.config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
var CountryPickerService = /** @class */ (function () {
    function CountryPickerService(config, _http) {
        this._http = _http;
        this._data = null;
        this._baseUrl = config.baseUrl;
        this._filename = config.filename;
        this._data = this._loadData();
    }
    CountryPickerService_1 = CountryPickerService;
    CountryPickerService.handleError = function (error) {
        var errMsg;
        if (error instanceof HttpResponse) {
            if (error.status === 404) {
                errMsg = 'Error loading countries.json file.'
                    + ' Please configure WebPack and load countries.json assets to your root folder';
            }
            else {
                var body = error.body || '';
                var err = body.error || JSON.stringify(body);
                errMsg = error.status + " - " + (error.statusText || '') + " " + err;
            }
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return throwError(errMsg);
    };
    CountryPickerService.prototype.getCountries = function () {
        return this._data
            .pipe(map(function (countries) {
            return countries.map(function (country) {
                country.name.native[0] = country.name.native[Object.keys(country.name.native)[0]];
                return country;
            });
        }));
    };
    CountryPickerService.prototype.getBaseUrl = function () {
        return this._baseUrl;
    };
    CountryPickerService.prototype._loadData = function () {
        return this._http.get(this._baseUrl + this._filename)
            .pipe(catchError(CountryPickerService_1.handleError));
    };
    var CountryPickerService_1;
    CountryPickerService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [COUNTRY_PICKER_CONFIG,] }] },
        { type: HttpClient }
    ]; };
    CountryPickerService = CountryPickerService_1 = tslib_1.__decorate([ tslib_1.__param(0, Inject(COUNTRY_PICKER_CONFIG))
    ], CountryPickerService);
CountryPickerService.ɵfac = function CountryPickerService_Factory(t) { return new (t || CountryPickerService)(ɵngcc0.ɵɵinject(COUNTRY_PICKER_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
CountryPickerService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CountryPickerService, factory: function (t) { return CountryPickerService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountryPickerService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [COUNTRY_PICKER_CONFIG]
            }] }, { type: ɵngcc1.HttpClient }]; }, null); })();
    return CountryPickerService;
}());
export { CountryPickerService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1jb3VudHJ5LXBpY2tlci9jb3VudHJ5LXBpY2tlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hFLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUscUJBQXFCLEVBQXVCLE1BQU0seUJBQXlCLENBQUM7OztBQUlyRjtJQXdCRSw4QkFDaUMsTUFBMkIsRUFDbEQsS0FBaUI7UUFBakIsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQXRCbkIsVUFBSyxHQUFrQyxJQUFJLENBQUM7UUF3QmxELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEMsQ0FBQzs2QkEvQlUsb0JBQW9CO0lBTWQsZ0NBQVcsR0FBNUIsVUFBNkIsS0FBOEI7UUFDekQsSUFBSSxNQUFjLENBQUM7UUFDbkIsSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFO1lBQ2pDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ3hCLE1BQU0sR0FBRyxvQ0FBb0M7c0JBQ3pDLDhFQUE4RSxDQUFDO2FBQ3BGO2lCQUFNO2dCQUNMLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO2dCQUM5QixJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQy9DLE1BQU0sR0FBTSxLQUFLLENBQUMsTUFBTSxZQUFNLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRSxVQUFJLEdBQUssQ0FBQzthQUMvRDtTQUNGO2FBQU07WUFDTCxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzNEO1FBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBV00sMkNBQVksR0FBbkI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsSUFBSSxDQUNILEdBQUcsQ0FBQyxVQUFDLFNBQXFCO1lBQ3hCLE9BQUEsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFDLE9BQWlCO2dCQUM5QixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEYsT0FBTyxPQUFPLENBQUM7WUFDakIsQ0FBQyxDQUFDO1FBSEYsQ0FHRSxDQUNILENBQ0YsQ0FBQztJQUNOLENBQUM7SUFFTSx5Q0FBVSxHQUFqQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRU8sd0NBQVMsR0FBakI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFhLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUM5RCxJQUFJLENBQ0gsVUFBVSxDQUFDLHNCQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUM3QyxDQUFDO0lBQ04sQ0FBQzs7O2dEQTdCRSxNQUFNLFNBQUMscUJBQXFCO2dCQUNkLFVBQVU7O0lBMUJoQixvQkFBb0IsZ0RBRzFCLFNBSk4sVUFBVSxFQUFFLHJCQUNMLENBeUJILG1CQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO09BekJyQixvQkFBb0IsQ0F1RGhDOzs7Ozs7OzsrREFDRDtJQURBLDJCQUFDO0NBQUEsQUF2REQsSUF1REM7U0F2RFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IENPVU5UUllfUElDS0VSX0NPTkZJRywgQ291bnRyeVBpY2tlckNvbmZpZyB9IGZyb20gJy4vY291bnRyeS1waWNrZXIuY29uZmlnJztcbmltcG9ydCB7IElDb3VudHJ5IH0gZnJvbSAnLi9jb3VudHJ5LmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb3VudHJ5UGlja2VyU2VydmljZSB7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfYmFzZVVybDogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IF9maWxlbmFtZTogc3RyaW5nO1xuICBwcml2YXRlIF9kYXRhOiBPYnNlcnZhYmxlPElDb3VudHJ5W10+IHwgbnVsbCA9IG51bGw7XG5cbiAgcHJvdGVjdGVkIHN0YXRpYyBoYW5kbGVFcnJvcihlcnJvcjogSHR0cFJlc3BvbnNlPGFueT4gfCBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGxldCBlcnJNc2c6IHN0cmluZztcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICBlcnJNc2cgPSAnRXJyb3IgbG9hZGluZyBjb3VudHJpZXMuanNvbiBmaWxlLidcbiAgICAgICAgICArICcgUGxlYXNlIGNvbmZpZ3VyZSBXZWJQYWNrIGFuZCBsb2FkIGNvdW50cmllcy5qc29uIGFzc2V0cyB0byB5b3VyIHJvb3QgZm9sZGVyJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBlcnJvci5ib2R5IHx8ICcnO1xuICAgICAgICBjb25zdCBlcnIgPSBib2R5LmVycm9yIHx8IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgICAgICBlcnJNc2cgPSBgJHtlcnJvci5zdGF0dXN9IC0gJHtlcnJvci5zdGF0dXNUZXh0IHx8ICcnfSAke2Vycn1gO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlcnJNc2cgPSBlcnJvci5tZXNzYWdlID8gZXJyb3IubWVzc2FnZSA6IGVycm9yLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJNc2cpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChDT1VOVFJZX1BJQ0tFUl9DT05GSUcpIGNvbmZpZzogQ291bnRyeVBpY2tlckNvbmZpZyxcbiAgICBwcml2YXRlIF9odHRwOiBIdHRwQ2xpZW50XG4gICkge1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBjb25maWcuYmFzZVVybDtcbiAgICB0aGlzLl9maWxlbmFtZSA9IGNvbmZpZy5maWxlbmFtZTtcbiAgICB0aGlzLl9kYXRhID0gdGhpcy5fbG9hZERhdGEoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb3VudHJpZXMoKTogT2JzZXJ2YWJsZTxJQ291bnRyeVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKGNvdW50cmllczogSUNvdW50cnlbXSkgPT5cbiAgICAgICAgICBjb3VudHJpZXMubWFwKChjb3VudHJ5OiBJQ291bnRyeSkgPT4ge1xuICAgICAgICAgICAgY291bnRyeS5uYW1lLm5hdGl2ZVswXSA9IGNvdW50cnkubmFtZS5uYXRpdmVbT2JqZWN0LmtleXMoY291bnRyeS5uYW1lLm5hdGl2ZSlbMF1dO1xuICAgICAgICAgICAgcmV0dXJuIGNvdW50cnk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRCYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2Jhc2VVcmw7XG4gIH1cblxuICBwcml2YXRlIF9sb2FkRGF0YSgpOiBPYnNlcnZhYmxlPElDb3VudHJ5W10+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQ8SUNvdW50cnlbXT4odGhpcy5fYmFzZVVybCArIHRoaXMuX2ZpbGVuYW1lKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGNhdGNoRXJyb3IoQ291bnRyeVBpY2tlclNlcnZpY2UuaGFuZGxlRXJyb3IpXG4gICAgICApO1xuICB9XG59XG4iXX0=