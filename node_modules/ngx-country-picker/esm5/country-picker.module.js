import * as tslib_1 from "tslib";
import { NgModule, Optional, SkipSelf } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { COUNTRY_PICKER_CONFIG, COUNTRY_PICKER_CONFIG_DEFAULT } from './country-picker.config';
import { CountryPickerService } from './country-picker.service';
import { CountryPickerComponent } from './country-picker.component';
import * as ɵngcc0 from '@angular/core';
export function countryPickerServiceFactory(config, http) {
    return new CountryPickerService(config, http);
}
var CountryPickerModule = /** @class */ (function () {
    function CountryPickerModule(parentModule) {
        if (parentModule) {
            throw new Error('CountryPickerModule is already loaded. Import it in the AppModule only');
        }
    }
    CountryPickerModule_1 = CountryPickerModule;
    CountryPickerModule.forRoot = function (providedConfig) {
        if (providedConfig === void 0) { providedConfig = COUNTRY_PICKER_CONFIG_DEFAULT; }
        return {
            ngModule: CountryPickerModule_1,
            providers: [
                { provide: COUNTRY_PICKER_CONFIG, useValue: providedConfig },
                {
                    provide: CountryPickerService,
                    useFactory: countryPickerServiceFactory,
                    deps: [COUNTRY_PICKER_CONFIG, HttpClient]
                }
            ]
        };
    };
    var CountryPickerModule_1;
    CountryPickerModule.ctorParameters = function () { return [
        { type: CountryPickerModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    CountryPickerModule = CountryPickerModule_1 = tslib_1.__decorate([ tslib_1.__param(0, Optional()), tslib_1.__param(0, SkipSelf())
    ], CountryPickerModule);
CountryPickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CountryPickerModule });
CountryPickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CountryPickerModule_Factory(t) { return new (t || CountryPickerModule)(ɵngcc0.ɵɵinject(CountryPickerModule, 12)); }, imports: [[
            CommonModule,
            HttpClientModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CountryPickerModule, { declarations: function () { return [CountryPickerComponent]; }, imports: function () { return [CommonModule,
        HttpClientModule]; }, exports: function () { return [CountryPickerComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountryPickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [
                    CountryPickerComponent
                ],
                exports: [
                    CountryPickerComponent
                ]
            }]
    }], function () { return [{ type: CountryPickerModule, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }]; }, null); })();
    return CountryPickerModule;
}());
export { CountryPickerModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1waWNrZXIubW9kdWxlLmpzIiwic291cmNlcyI6WyJuZzovbmd4LWNvdW50cnktcGlja2VyL2NvdW50cnktcGlja2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSw2QkFBNkIsRUFBdUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNwSCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFcEUsTUFBTSxzQ0FBc0MsTUFBMkIsRUFBRSxJQUFnQjtJQUN2RixPQUFPLElBQUksb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFjRDtJQWdCRSw2QkFBb0MsWUFBaUM7UUFDbkUsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO1NBQzNGO0lBQ0gsQ0FBQzs0QkFwQlUsbUJBQW1CO0lBRWhCLDJCQUFPLEdBQXJCLFVBQXNCLGNBQW1FO1FBQW5FLCtCQUFBLEVBQUEsOENBQW1FO1FBQ3ZGLE9BQU87WUFDTCxRQUFRLEVBQUUscUJBQW1CO1lBQzdCLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFDO2dCQUMxRDtvQkFDRSxPQUFPLEVBQUUsb0JBQW9CO29CQUM3QixVQUFVLEVBQUUsMkJBQTJCO29CQUN2QyxJQUFJLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxVQUFVLENBQUM7aUJBQzFDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O2dCQUVpRCxtQkFBbUIsdUJBQXhELFFBQVEsWUFBSSxRQUFROztJQWhCdEIsbUJBQW1CLCtDQUVXLFNBZDFDLFFBQVEsQ0FBQyxjQUNSLE9BQU8sRUFBRSxrQkFDUCwzREFVSSxDQWdCTyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBO09BMUJyQixrQkFDWixsQkFTUyxtQkFBbUIsQ0FxQi9CO1lBOUJtQixjQUNqQixjQUNELFlBQVksRUFBRSxrQkFDWjtXQUFzQixjQUN2QixjQUNELE9BQU8sRUFBRSxrQkFDUCxzQkFBc0IsY0FDdkIsVUFDRixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBdUJGO0lBREEsMEJBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQXJCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENPVU5UUllfUElDS0VSX0NPTkZJRywgQ09VTlRSWV9QSUNLRVJfQ09ORklHX0RFRkFVTFQsIENvdW50cnlQaWNrZXJDb25maWcgfSBmcm9tICcuL2NvdW50cnktcGlja2VyLmNvbmZpZyc7XG5pbXBvcnQgeyBDb3VudHJ5UGlja2VyU2VydmljZSB9IGZyb20gJy4vY291bnRyeS1waWNrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb3VudHJ5UGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9jb3VudHJ5LXBpY2tlci5jb21wb25lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gY291bnRyeVBpY2tlclNlcnZpY2VGYWN0b3J5KGNvbmZpZzogQ291bnRyeVBpY2tlckNvbmZpZywgaHR0cDogSHR0cENsaWVudCkge1xuICByZXR1cm4gbmV3IENvdW50cnlQaWNrZXJTZXJ2aWNlKGNvbmZpZywgaHR0cCk7XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgSHR0cENsaWVudE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBDb3VudHJ5UGlja2VyQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBDb3VudHJ5UGlja2VyQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQ291bnRyeVBpY2tlck1vZHVsZSB7XG5cbiAgcHVibGljIHN0YXRpYyBmb3JSb290KHByb3ZpZGVkQ29uZmlnOiBDb3VudHJ5UGlja2VyQ29uZmlnID0gQ09VTlRSWV9QSUNLRVJfQ09ORklHX0RFRkFVTFQpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENvdW50cnlQaWNrZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvdW50cnlQaWNrZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge3Byb3ZpZGU6IENPVU5UUllfUElDS0VSX0NPTkZJRywgdXNlVmFsdWU6IHByb3ZpZGVkQ29uZmlnfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENvdW50cnlQaWNrZXJTZXJ2aWNlLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGNvdW50cnlQaWNrZXJTZXJ2aWNlRmFjdG9yeSxcbiAgICAgICAgICBkZXBzOiBbQ09VTlRSWV9QSUNLRVJfQ09ORklHLCBIdHRwQ2xpZW50XVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogQ291bnRyeVBpY2tlck1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bnRyeVBpY2tlck1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSBBcHBNb2R1bGUgb25seScpO1xuICAgIH1cbiAgfVxufVxuIl19